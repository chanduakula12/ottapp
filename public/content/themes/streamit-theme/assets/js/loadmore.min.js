"use strict";
! function(s) {
    s(document).ready(function() {
        var a = s(".php_prefix_datapass").data("options"),
            e = s(".php_prefix_datapass_blog").data("options"),
            o = s(".php_prefix_datapass_archive"),
            t = o.data("options");
        "load_more" == a && s(".php_prefix_search_loadmore_btn").click(function() {
            var e = s(this).attr("data-loading-text"),
                t = s(this).text(),
                r = s(this),
                a = {
                    action: "loadmore",
                    query: streamit_loadmore_params.posts,
                    page: streamit_loadmore_params.current_page
                };
            s.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    r.text(e)
                },
                success: function(a) {
                    a ? (r.text(t).prev("div").append(a), streamit_loadmore_params.current_page++, LazyLoadObserver(), streamit_loadmore_params.current_page == streamit_loadmore_params.max_page && r.remove()) : r.remove()
                }
            })
        }), "load_more" == e && s(".php_prefix_loadmore_btn_blog").click(function() {
            var e = s(this).attr("data-loading-text"),
                t = s(this).text(),
                r = s(this),
                a = {
                    action: "loadmore_blog",
                    query: streamit_loadmore_params.posts,
                    page: streamit_loadmore_params.current_page,
                    availablepost: r.data("displaypost")
                };
            s.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    r.text(e)
                },
                success: function(a) {
                    a ? (r.text(t).parent().before(a), streamit_loadmore_params.current_page++, streamit_loadmore_params.current_page >= streamit_loadmore_params.max_page && r.remove()) : r.remove()
                }
            })
        }), "load_more" == t && s(".php_prefix_loadmore_btn").click(function() {
            var e = s(this).attr("data-loading-text"),
                t = s(this).text(),
                r = o.data("totalpages"),
                i = s(this),
                a = {
                    action: "loadmore_archive",
                    query: streamit_loadmore_params.query1,
                    page: streamit_loadmore_params.current_page,
                    availablepost: o.data("displaypost")
                };
            s.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    i.text(e)
                },
                success: function(a) {
                    a ? (i.text(t).prev("div").append(a), streamit_loadmore_params.current_page++, streamit_loadmore_params.current_page >= r && i.remove()) : i.remove()
                }
            })
        }), s(".php_prefix_loadmore_btn_episode").length && s(".php_prefix_loadmore_btn_episode").click(function() {
            var e = s(this),
                t = e.attr("data-loading-text"),
                a = e.attr("data-episode-query-args"),
                r = e.attr("data-max-number-page"),
                i = e.text(),
                o = e.attr("data-loadmore-page-no"),
                a = {
                    action: "loadmore_episodes",
                    query: a,
                    page: o
                };
            s.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    e.text(t)
                },
                success: function(a) {
                    a ? (e.text(i).prev().append(a), e.attr("data-loadmore-page-no", parseInt(o) + 1), e.attr("data-loadmore-page-no") == r && e.remove()) : e.remove()
                }
            })
        }), s(".css_prefix_persons_list").click(function() {
            var e = s(this),
                t = e.attr("data-loading-text"),
                r = e.text(),
                i = o.data("totalpages"),
                a = {
                    action: "loadmore_persons_archive",
                    query: JSON.parse(streamit_loadmore_params.posts),
                    page: streamit_loadmore_params.current_page,
                    availablepost: o.data("displaypost")
                };
            s.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    e.text(t)
                },
                success: function(a) {
                    a ? (e.text(r).prev("div").append(a), watchlist_last_item(), circle_chart(), streamit_loadmore_params.current_page++, streamit_loadmore_params.current_page >= i && e.remove()) : e.remove()
                }
            })
        })
    }), s(function(i) {
        var o = !0,
            s = 2e3,
            a = i(".php_prefix_datapass").data("options"),
            e = i(".php_prefix_datapass_blog").data("options"),
            r = i(".php_prefix_datapass_archive"),
            t = i(".php_prefix_datapass_archive").data("options");
        "infinite_scroll" == a && i(window).scroll(function() {
            var a = {
                action: "loadmore",
                query: streamit_loadmore_params.posts,
                page: streamit_loadmore_params.current_page
            };
            i(document).scrollTop() > i(document).height() - s && 1 == o && i.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    o = !1
                },
                success: function(a) {
                    a ? (i(".loader-wheel-container").html('<div class="loader-wheel"><i><i><i><i><i><i><i><i><i><i><i><i></i></i></i></i></i></i></i></i></i></i></i></i></div>'), i("#main").find("article:last-of-type").after(a), o = !0, streamit_loadmore_params.current_page++, LazyLoadObserver(), streamit_loadmore_params.current_page == streamit_loadmore_params.max_page && i(".loader-wheel-container").html("")) : i(".loader-wheel-container").html("")
                }
            })
        }), "infinite_scroll" == e && i(window).scroll(function() {
            var a = i(this),
                a = {
                    action: "loadmore_blog",
                    query: streamit_loadmore_params.posts,
                    page: streamit_loadmore_params.current_page,
                    availablepost: a.data("displaypost")
                };
            i(document).scrollTop() > i(document).height() - s && 1 == o && i.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function() {
                    o = !1, i(".loader-wheel-container").html('<div class="loader-wheel"><i><i><i><i><i><i><i><i><i><i><i><i></i></i></i></i></i></i></i></i></i></i></i></i></div>')
                },
                success: function(a) {
                    var e;
                    a && (((e = i("#main .css_prefix-blog-main-list").children().first()).hasClass("col-lg-6") || e.hasClass("col-lg-4") ? i("#main .css_prefix-blog-main-list") : i("#main .css_prefix-blog-main-list").children().first()).append(a), i("#targetRow").append(a), o = !0, streamit_loadmore_params.current_page++, streamit_loadmore_params.current_page >= streamit_loadmore_params.max_page && i(".loader-wheel-container").html("")), i(".loader-wheel-container").html("")
                }
            })
        }), "infinite_scroll" == t && i(window).scroll(function() {
            var a = {},
                e = i(".loader-wheel-container"),
                t = r.data("totalpages"),
                a = 0 < i(".php_prefix_datapass_archive .iq-archive-person").length ? {
                    action: "loadmore_persons_archive",
                    query: streamit_loadmore_params.query1,
                    page: streamit_loadmore_params.current_page,
                    availablepost: i(".php_prefix_datapass_archive").data("displaypost")
                } : {
                    action: "loadmore_archive",
                    query: streamit_loadmore_params.query1,
                    archive_query: streamit_loadmore_params.query,
                    page: streamit_loadmore_params.current_page,
                    type: "infinite_scroll",
                    availablepost: r.data("displaypost")
                };
            i(document).scrollTop() > i(document).height() - s && 1 == o && i.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: a,
                type: "POST",
                beforeSend: function(a) {
                    o = !1, i(".loader-wheel-container").html('<div class="loader-wheel"><i><i><i><i><i><i><i><i><i><i><i><i></i></i></i></i></i></i></i></i></i></i></i></i></div>')
                },
                success: function(a) {
                    a ? (e.prev("div").append(a), watchlist_last_item(), circle_chart(), o = !0, streamit_loadmore_params.current_page++, streamit_loadmore_params.current_page >= t ? (o = !1, i(".loader-wheel-container").html("")) : o = !0) : i(".loader-wheel-container").html("")
                }
            })
        }), 0 < i("#cast-person-list").length && i("#cast-person-list").scroll(function() {
            var a, e, t, r = i(this);
            "infinite_scroll" == r.find(".streamit_cast_list.active").data("options") && i(document).scrollTop() > i(document).height() - s && 1 == o && (o = !1, a = parseInt(r.find(".streamit_cast_list.active").data("current-page")), t = r.find(".streamit_cast_list.active").attr("data-attibute"), e = window.location.href, t = {
                action: "loadmore_person",
                query: streamit_loadmore_params.posts,
                page: a,
                href: e,
                post_type: t
            }, a++, r.find(".streamit_cast_list.active").data("current-page", a), i.ajax({
                url: streamit_loadmore_params.ajaxurl,
                data: t,
                type: "POST",
                success: function(a) {
                    a ? (r.find(".streamit_cast_list.active .loader-wheel-container").html('<div class="loader-wheel"><i><i><i><i><i><i><i><i><i><i><i><i></i></i></i></i></i></i></i></i></i></i></i></i></div>'), r.find(".streamit_cast_list.active .cast-related-list tr:last-child").after(a), o = !0) : r.find(".streamit_cast_list.active .loader-wheel-container").html("")
                }
            }))
        })
    })
}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,